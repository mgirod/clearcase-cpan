#summary ClearCase::Wrapper::MGi: support for branch-no-merge strategy, and incremental types

= Introduction =

This wrapper is distributed via CPAN, and was documented [http://search.cpan.org/perldoc?ClearCase::Wrapper::MGi there]
([http://www.cmwiki.com/IncrementalTypesImp sketched in the cm wiki]).
We'll however gradually [UcmAlternative develop these] here.
It builds upon !ClearCase::Wrapper and thus upon [ClearCaseArgv ClearCase::Argv].
It aims at supporting various novel usage patterns of (base) !ClearCase.

= Details =

The code on this site is developed in a _dev_ branch.
  * I do not test _ctcmd_ on Unix anymore for the time being. I currently use mostly cygwin, and the port has delayed my main work.
  * My intention was to develop a regression testing suite, which I started to do on !ClearCase::!SyncTree (still pending)
  * I also acknowledge deficiencies in the support for the branch-no-merge strategy:
    * missing support for {{{des -fmt "%PVn"}}} and {{{%PSn}}}
    * missing support for graphical {{{lsgen}}} (based on Tk)
    * missing support for {{{annotate}}} (based on pruning the -all output)
  * No major [http://code.google.com/p/clearcase-cpan/issues/list known bugs] now, but:
    * {{{setdepth}}} recursion could maybe be shortened (performance) when a depth is given, e.g. supporting {{{diff -pred}}} but there is an ambiguity with 'depth': currently, it is the number of levels _displayed_ (intuitive, so probably to be kept).
    * ipc is better supported in !ClearCase::Argv, even *only* under cygwin. The mode is forced in every function and {{{ctcmd}}} may still be preferred for some (which is wrong). It will always succeed on Windows, either on top of !ClearCase::!CtCmd if installed, or on top of CAL. I missed the existence of support in !ClearCase::Wrapper for flags such as {{{-/ipc=1}}}, and the possibility to set it in the {{{.clearcase_profile.pl}}} file.
    * The source containers get slightly bloated: every new branch results in a full copy. This is only a minor nuisance... Solving it is possible: via a special element type manager...
  * Intentions:
    * support for incremental types, and first for label types, including:
      * folding config specs (automatic generation of the cascading rules)
      * consolidation of sparse fixed labels
      * consider global types (using admin vobs or not)
    * availability of functionality from !ClearCase::Wrapper:DSB, such as inclusion of config spec components
    * integration of {{{synctree}}} under {{{cleartool}}}, including via the graphical interface.
  * Mostly done (although now, I'd like to redesign both to use classes, so that it would be easier/shorter to take it in use in new functions: the current technique is too verbose...):
    * [CavComments interactive input]: generalize to avoid all hangs
    * [CwmLockingIssues lock/unlock], using site specific methods when not owning the equivalent or previous types.
  * Under work:
    * [WmgArc mkxxtype -arc]
    * [WmgMkLabel mklabel] -con