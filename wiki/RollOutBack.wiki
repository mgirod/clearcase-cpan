#summary Rollout and rollback

= !ChangeSet =

Despite the UCM _deliver_, the rollout and rollback functionalities make only sense together.

To some extent, they are already implemented, and only need some convenience wrapping up.

Now, if the changeset being rolled out is well-defined, the one being rolled-back is not easily idenitifed. The offering so far uses +mkview -clone+, which works (until proven otherwise), but is relatively heavy, and non obvious to trace back.

Recording the changeset potentially to be rolled back is possible in many different ways, and I haven't made up my mind yet. Or rather, I made it up several times, and changed my mind.

= Implementation ideas =

Logging now various concerns and ideas, in prevision of future critique, so as to have something objective to work on:

  * rollback is a special form of rollout: it produces a *new* (equivalent fixed) label type, higher than the previous
  * rolling back the rollback offers thus the same data, but a new state
  * the same versions may thus have to be rolled back several times, in different contexts (as part of different rollbacks)
  * alternative options
    * create and apply a new label type, e.g FOOb1.01 for FOO_1.01 (none needed for FOO_1.00!?)
      * heavy?
      * noise generating?
    * saving the changeset as an attribute
      * using oids of the versions
      * OK for a few, but what if there are 100s
      * probably lighter at rollout, and not cluttering the vtree...
      * maybe less robust (removed elements?)
      * maybe alternative implementation for small numbers (<=10)
    * not saving the changeset at all, but relying upon {{{mkview -clone -equiv}}} to compute it as needed. This may be a fallout strategy and win on large numbers. I think this will be my first approach.
  * there will be some trivial rollbacks (nothing rolled out on top), and more problematic ones
    * for the problematic elements:
      * branch off/checkout
      * subtractive merge
      * alter the merge arrows to skip the removed version from the contributing path