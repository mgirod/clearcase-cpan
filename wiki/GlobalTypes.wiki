#summary Global types: good; admin vobs: bad
#labels Phase-Design

= Global types are useful =

Config specs use types only by name.
The names are guaranteed to be unique per vob, but not across vobs.
It results that the config specs are not guaranteed to deal with the _same_ objects (even semantically, considering the intention for their creation): there may easily be accidental matches.
If one wants to have the effect of a config spec rule span across several vobs, one may use _cptype_ to copy the types.
The resulting objects are however distinct.

Types may be _global_ or _ordinary_.
Global types may be linked with _!GlobalDefinition_ hyperlinks.
The result is for the _local_ type, source of the _!GlobalDefinition_ hyperlink, to accept a role of proxy, delegating its function to the remote homonymous type. This is convenient, as its extends the scope of action of functions such as _lock_ or _rmtype_. It does in effect share the types between several vobs.

= The concept of admin vob, and its shortcomings =

Copying types, and linking them only concerns existing types.
Without script support, this requires several commands and a good understanding of the tools.

Admin vobs allow to create new copies of types pre-existing in a centralized location. The new copies may even be created as needed, e.g. while applying labels with _mklabel_. At first sight, this is thus a valuable convenience.

The price to pay is unfortunately too high.

== _lstype_ errors or warnings ==

= Global types without admin vobs =