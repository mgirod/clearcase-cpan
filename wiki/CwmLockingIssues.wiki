#summary With incremental types, lock one type means in fact locking two...
= Introduction =

We consider two kinds of types _sets_: label type _families_,
with one floating type and a chain of fixed, incremental types,
and chains of successive (_archived_) branch or label types.

In any case, different types in the set are _linked_ with
hyperlinks of two types: _EqInc_ or _PrevInc_.

Locking/unlocking one type may in fact imply wishing to modify
these hyperlinks, i.e. affect *two* types.

This brings a problem if the different types are not owned by the 
same account.

= Details =

We consider here only incremental label types, because archiving
is not implemented yet, and may be simpler (even not require 
anything related to the current topic).

We consider two kinds of locking:
   # _logical_ (or high-level) locking
   # _physical_ (or low-level, _silent_) locking
The first case concerns the _floating_ label of an incremental
_family_. Unlocking it, typically in order to apply or to move it,
implies unlocking the _equivalent_ fixed label in the same time,
because applying the one implies applying the other.

Conversely, incrementing the type ({{{mklbtype -inc}}}), implies
making changes to the _previous_ type as well, in order to update
the hyperlinks, so that locking the _family_ should in fact lock 
*three* different types.

The problem is what to do when all the types are not owned by the 
same account.
!ClearCase offers no direct support for _group locking_.
This was reported as a request for enhancement, but is actually a
bug, if one considers the !MultiSite aspect: (non-obsolete) locks
are not exported via !MultiSite, so that locks on a shared label
type will not be visible on a remote replica, on which it will 
thus be possible to perform some tasks denied on the local one.

Waiting for a solution to this problem, we may use various 
techniques, but all of them have to be set up in the site
configuration. The simplest involves _sudo_ (on unix).

The one sketched in the _extra_ sub-directory uses _ssh_ (which
makes it accessible from cygwin as well).

Both use an indirection via the user {{{~/.clearcase_profile.pl}}}
file.