.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SyncTree 3"
.TH SyncTree 3 "2008-06-01" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
ClearCase::SyncTree \- Synchronize a tree of files with a tree of elements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 18
\&    # Create a 'synctree' object.
\&    my $sync = ClearCase::SyncTree->new;
\&    # Tell it where the files are coming from ...
\&    $sync->srcbase($sbase);
\&    # Tell it where they're going to ...
\&    $sync->dstbase($dbase);
\&    # Supply the list of files to work on (relative or absolute paths).
\&    $sync->srclist(keys %files);
\&    # Compare src and dest lists and figure out what to do.
\&    $sync->analyze;
\&    # Create new elements in the target area.
\&    $sync->add;
\&    # Update existing files which differ between src and dest.
\&    $sync->modify;
\&    # Remove any files from dest that aren't in src.
\&    $sync->subtract;
\&    # Check in the changes.
\&    $sync->checkin;
.Ve
.PP
See the enclosed \fIsynctree\fR script for full example usage.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an infrastructure for programs which want to
\&\fIsynchronize\fR a set of files, typically a subtree, with a similar
destination subtree in \s-1VOB\s0 space.  The enclosed \fIsynctree\fR script is
an example of such a program.
.PP
The source area may be in a \s-1VOB\s0 or may be a regular filesystem; the
destination area must be in a \s-1VOB\s0. Methods are supplied for adding,
subtracting, and modifying destination files so as to make that area
look identical to the source.
.PP
Symbolic links are supported, even on Windows (of course in this case
the source filesystem must support them, which is only likely in the
event of an \s-1MVFS\-\s0>\s-1MVFS\s0 transfer). Note that the text of the link is
transported verbatim from source area to dest area; thus relative
symlinks may no longer resolve in the destination.
.Sh "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
Use \f(CW\*(C`ClearCase::SyncTree\->new\*(C'\fR to construct a SyncTree object, which
can then be filled in and used via the instance methods below.
.Sh "\s-1INSTANCE\s0 \s-1METHODS\s0"
.IX Subsection "INSTANCE METHODS"
Following is a brief description of each supported method. Examples
are given for all methods that take parameters; if no example is
given usage may be assumed to look like:
.PP
.Vb 1
\&    $obj->method;
.Ve
.IP "\(bu \->srcbase" 4
.IX Item "->srcbase"
Provides the base by which to 'relativize' the incoming pathnames.
E.g.  with a \fBsrcbase\fR of \fI/tmp/x\fR the incoming file \fI/tmp/x/y/z\fR
will become \fIy/z\fR and will be deposited under the \fBdstbase\fR (see) by
that path. Example:
.Sp
.Vb 1
\&    $obj->srcbase('/var/tmp/newstuff');
.Ve
.IP "\(bu \->dstbase" 4
.IX Item "->dstbase"
Provides the root of the tree into which to place the relative paths
derived from \fBsrcbase\fR as described above. Example:
.Sp
.Vb 1
\&    $obj->dstbase('/vobs/tps/newstuff');
.Ve
.IP "\(bu \->srclist/\->srcmap" 4
.IX Item "->srclist/->srcmap"
There are two ways to specify the list of incoming files. They may be
provided as a simple list via \fBsrclist\fR, in which case they'll be
relativized as described above and deposited in \fBdstbase\fR, or they can
be specified via \fBsrcmap\fR which allows the destination file to have a
different name from the source.
.Sp
\&\fIsrclist\fR takes a list of input filenames. These may be absolute or
relative; they will be canonicalized internally.
.Sp
\&\fIsrcmap\fR is similar but takes a hash which maps input filenames to
their destination counterparts.
.Sp
Examples:
.Sp
.Vb 1
\&    $obj->srclist(@ARGV);       # check in the named files
.Ve
.Sp
.Vb 2
\&    my %filemap = (x/y/z.c => 'x/y/z.cxx', a/b => 'foo');
\&    $obj->srcmap(%filemap);     # check in the named files
.Ve
.IP "\(bu \->analyze" 4
.IX Item "->analyze"
After the object knows its \fIsrcbase\fR, \fIdstbase\fR, and input file
lists, this method compares the source and target trees and categorizes
the required actions into \fIadditions\fR (new files in the destination
area), \fImodifications\fR (those which exist but need to be updated) and
\&\fIsubtractions\fR (those which no longer exist in the source area).
After analysis is complete, the corresponding actions may be taken via
the \fIadd\fR, \fImodify\fR, and \fIsubtract\fR methods as desired.
.Sp
However, note that \fIsubtract\fR analysis is optional; it must be
requested by setting the \->remove attribute prior to calling
\&\->analyze.
.IP "\(bu \->add" 4
.IX Item "->add"
Takes the list of \fIadditions\fR as determined by the \fBanalyze\fR method
and creates them as new elements.
.IP "\(bu \->modify" 4
.IX Item "->modify"
Takes the list of \fImodifications\fR as determined by the \fBanalyze\fR
method and updates them in the destination tree.
.IP "\(bu \->subtract" 4
.IX Item "->subtract"
Takes the list of \fIsubtractions\fR as determined by the \fBanalyze\fR
method and rmname's them in the destination tree. The \->remove attribute
must have been set prior to calling \fBanalyze\fR.
.IP "\(bu \->remove" 4
.IX Item "->remove"
Boolean. The list of files to subtract from the destination area will
not be derived unless this attribute is set before analysis begins.
This is because it takes time to do \fIsubtract\fR analysis, so there's no
sense doing it unless you plan to call \->subtract later.
.IP "\(bu \->label" 4
.IX Item "->label"
Labels the new work. The label type can be specified as a parameter;
otherwise it will be taken from the attribute previously set by the
\&\fIlbtype\fR method.
.Sp
Labeling consists of a \fImklabel \-recurse\fR from \fIdstbase\fR down,
followed by labeling of parent directories from \fIdstbase\fR \fBup\fR to the
vob root. Example:
.Sp
.Vb 1
\&    $obj->label('FOO');
.Ve
.Sp
See also \fI\->label_mods\fR.
.IP "\(bu \->checkin" 4
.IX Item "->checkin"
Checks in all checkouts under the \fIdstbase\fR area.
.IP "\(bu \->cleanup" 4
.IX Item "->cleanup"
Undoes all checkouts under the \fIdstbase\fR area.
.IP "\(bu \->fail" 4
.IX Item "->fail"
Calls the \fIcleanup\fR method, then exits with a failure status. This is
the default exception handler; a different handler can be registered
via the \fIerr_handler\fR method (see).
.IP "\(bu \->err_handler" 4
.IX Item "->err_handler"
Registers an exception handler to be called upon failure of any
cleartool command. Call with 0 to have no handler. Pass it a code ref
to register a function, with an object and method \fIname\fR to register a
method, with a scalar ref to count errors. Examples:
.Sp
.Vb 4
\&    $obj->err_handler(0);               # ignore cleartool errors
\&    $obj->err_handler(\e$rc);            # count errors in $rc
\&    $obj->err_handler(\e&func);          # register func() for errors
\&    $obj->err_handler($self, 'method'); # register $obj->method
.Ve
.IP "\(bu \->protect" 4
.IX Item "->protect"
Sets an attribute which causes the \fIcheckin\fR method to align file
permissions after checking in. The meaning of this varies by platform:
on Unix an attempt is made to bring destination mode bits into
alignment with those of the source file. On Windows, files with
extensions such as .exe and .dll are made executable (though most
Windows filesystems don't pay attention to executable modes, \s-1MVFS\s0 does
and thus the execute bit becomes a source of frequent confusion for
Windows ClearCase users). Example:
.Sp
.Vb 1
\&    $obj->protect(0);                   # no dest mode fixups
.Ve
.IP "\(bu \->reuse" 4
.IX Item "->reuse"
Attempt \*(L"element reuse\*(R". Before creating a new file with \fImkelem\fR,
look through its directory's version tree to see if another of the same
name exists in any other version. If so, assume the new file intended
to be the same element and link the old and new names.
.Sp
.Vb 1
\&    $obj->reuse(1);
.Ve
.IP "\(bu \->ctime" 4
.IX Item "->ctime"
Sets a boolean indicating whether to throw away the timestamp of the
source file and give modified files their checkin date instead. This
flag is \fIfalse\fR by default (i.e. checkins have \fI\-ptime\fR behavior).
.IP "\(bu \->ignore_co/\->overwrite_co" 4
.IX Item "->ignore_co/->overwrite_co"
By default, no view private files are allowed in the dest dir at
\&\fI\->analyze\fR time. This generally means either classic view-private
files or checked-out elements, which are a form of view-private files.
The \->ignore_co attribute causes existing checkouts to be ignored
instead of being disallowed; they do not cause the operation to abort,
nor do their contents get modified. The \->overwrite_co attribute
also prevents existing checkouts from aborting the operation but it
causes the checked-out version to be replaced by the contents of the
source file (if that exists and has different contents of course).
.IP "\(bu \->label_mods" 4
.IX Item "->label_mods"
By default the \fI\->label\fR method will recursively label all visible
elements under the \fIdstbase\fR directory. With this attribute set it
will label only modified elements instead.  Note that this may cause
confusion if an element is labeled but its parent directory isn't.
.IP "\(bu \->no_cr" 4
.IX Item "->no_cr"
By default, checkins initiated by the \fIcheckin\fR method are done one at
a time using the \fI\-from\fR flag. This will preserve config records in
the case where the input file is a derived object.  Setting the
\&\fIno_cr\fR attribute causes checkins to be done in one big \f(CW\*(C`"cleartool
ci"\*(C'\fR operation, which is faster but loses \s-1CR\s0's.
.IP "\(bu \->no_cmp" 4
.IX Item "->no_cmp"
This attribute causes all files which exist in both src and dest areas
to be considered modified by the \fIanalyze\fR method. An update will be
forced for all such elements.
.IP "\(bu \->cmp_func" 4
.IX Item "->cmp_func"
Sets or returns the coderef that's used to compare the source and
destination files. The default is \fI\fIFile::Compare::compare()\fI\fR but can
be replaced with a ref to your preferred function, eg:
.Sp
.Vb 1
\&    $obj->cmp_func(\e&my_compare_function);
.Ve
.Sp
The function takes the names of the two files to compare. It should set
\&\f(CW$!\fR if a file cannot be opened.
.IP "\(bu \->comment" 4
.IX Item "->comment"
Provides a comment to be used by the \fIcheckin\fR method. The default
comment is \f(CW"By:$0"\fR. Example:
.Sp
.Vb 1
\&    $obj->comment("your comment here");
.Ve
.IP "\(bu \->eltypemap" 4
.IX Item "->eltypemap"
In case the eltype of a particular file or set of files needs to be
overridden at creation time. Example:
.Sp
.Vb 1
\&    $obj->eltypemap('\e.(ht|x)ml$' => 'compressed_file');
.Ve
.Sh "Support for the BranchOff feature."
.IX Subsection "Support for the BranchOff feature."
BranchOff is a feature you can set up via an attribute in your config
spec.  The rationale and the design are documented in:
.PP
.Vb 1
\& http://www.cmcrossroads.com/cgi-bin/cmwiki/view/CM/BranchOffMain0
.Ve
.PP
Instead of branching off the selected version, the strategy is to
branch off the root of the version tree, copy-merging there from the
former.
.PP
This allows to avoid both merging back to /main or to a delivery
branch, and to cascade branches indefinitely.  The logical version tree
is restituted by navigating the merge arrows, to find all the direct or
indirect contributors.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Subtraction of symlinks is currently unimplemented (it's just a little
corner case I haven't gotten to).
.IP "\(bu" 4
SyncTree does not transport empty directories, and added/removed
directories aren't shown explicitly in the list of operations to be
performed. This is a structural artifact/flaw.
.IP "\(bu" 4
If a file is removed via the \->subtract method and later added back
via \->add, the result will be a new element (aka \fIevil twin\fR).
The \->reuse method (see) may be used to prevent evil twins.
.IP "\(bu" 4
I have not tested SyncTree in snapshot views and would not expect that
to work out of the box, though I did make some effort to code for the
possibility.
.PP
Following items are from Uwe Nagler of Lucent, unverified:
.IP "\(bu Mode changes of files should be supported." 4
.IX Item "Mode changes of files should be supported."
Currently:  If \s-1ONLY\s0 the protections of an existing file (in source and
\&\s-1VOB\s0 destination ) is changed in the source then this change is \s-1NOT\s0
transferred into the \s-1VOB\s0 destination.  E.g. If a file later gets
\&\*(L"execute\*(R" permissions (scripts) in the source then the file in \s-1VOB\s0
destination keeps the old permissions.
.IP "\(bu File type changes should be supported" 4
.IX Item "File type changes should be supported"
Currently:  If the type of an existing file (in source and \s-1VOB\s0
destination) is changed in the source (\s-1ASCII\-\s0>Binary) then the change
in \s-1VOB\s0 destination fails because of a ClearCase error (wrong file
type).
.IP "\(bu Cleanup Bug #1" 4
.IX Item "Cleanup Bug #1"
Wrong cleanup after detection of own checkouts below \s-1VOB\s0 destination:
If the current view has a checkout at the same branch where synctree
wants to checkout then (a) the whole synctree run is marked as failed
(which is \s-1OK\s0) but (b) the cleanup performs a uncheckout and the user
will lose the data of its checkout.
.IP "\(bu Cleanup Bug #2" 4
.IX Item "Cleanup Bug #2"
Wrong cleanup after detecting other checkouts below \s-1VOB\s0 destination:
If another view has a checkout at the same branch where synctree wants
to checkout then (a) the whole synctree run is \s-1NOT\s0 marked as failed (b)
only this element is not updated
.SH "AUTHOR"
.IX Header "AUTHOR"
Based on code originally written by Paul D. Smith
<pausmith@nortelnetworks.com>.  Paul's version was based on the Bourne
shell script 'citree' delivered as sample code with ClearCase.
.PP
Rewritten for Unix/Win32 portability by David Boyce in 8/1999, then
reorganized into a module in 1/2000. This module no longer bears the
slightest resemblance to any version of citree.
.PP
Support for branching off the root of the version tree (usually, /main/0)
added by Marc Girod.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1997,1998 Paul D. Smith and Bay Networks, Inc.
.PP
Copyright 1999\-2003 David Boyce (dsbperl \s-1AT\s0 boyski.com).
.PP
This script is distributed under the terms of the \s-1GNU\s0 General Public License.
You can get a copy via ftp://ftp.gnu.org/pub/gnu/ or its many mirrors.
This script comes with \s-1NO\s0 \s-1WARRANTY\s0 whatsoever, not even the implied
warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
.SH "STATUS"
.IX Header "STATUS"
SyncTree is currently \s-1ALPHA\s0 code and thus I reserve the right to change
the \s-1API\s0 incompatibly. At some point I'll bump the version suitably and
remove this warning, which will constitute an (almost) ironclad promise
to leave the interface alone.
.PP
Actually, as (a) Rational has released clearfsimport and (b) I am not
currently doing anything which requires SyncTree (or clearfsimport for
that matter), there isn't much ongoing support for this module.
However, it does seem to work fine and the interface hasn't changed in
two years (!) so I guess we could call that stable. It's unclear
whether this means stable as in \*(L"robust\*(R" or stable as in \*(L"dead\*(R".
.SH "PORTING"
.IX Header "PORTING"
This module is known to work on Solaris 2.6\-7 and Windows \s-1NT\s0 4.0SP3\-5,
and with perl 5.004_04 and 5.6.  As these platforms cover a fairly wide
range there should be no \fImajor\fR portability issues, but please send
bug reports or patches to the address above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIsynctree\fR\|(1), \fIClearCase::Argv\fR\|(3), \fIGetopt::Long\fR\|(3), \fIIPC::ChildSafe\fR\|(3)
