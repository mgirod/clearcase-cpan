# -*- cperl -*-
use strict;
use Benchmark;

# Create a new attribute type, and attach one string attribute of this type
# to the current directory.
# Check that it succeeded, and cleanup.
# This requires that the string value is properly quoted.
# This case tests a regression which was introduced at some point.
#
# This test case does not test the presence of triggers.

use Test::More tests => 16;
select(STDERR); $| = 1; select(STDOUT); $| = 1;
use ClearCase::Argv qw(chdir);
use Argv 1.25;

ClearCase::Argv->summary;      # start keeping stats
ClearCase::Argv->ipc(1);
my $ct = ClearCase::Argv->new({autochomp=>1});
my $silent = $ct->clone({stdout=>0, stderr=>0});
$silent->dbglevel(1) if @ARGV;
my $ctx = ['/vobs/cello/cade_struct/bin/cleartool.plx'];
my $wrap = $silent->clone({ct=>$ctx});
die "This test needs to be run in a view, in a vob\n"
  unless $ct->argv(qw(ls -s -d .))->stderr(0)->qx;

my @attype = sort $ct->argv(qw(lstype -kind attype -s -obs))->qx;
my $attype = @attype? $attype[$#attype] . 'Z' : 'FOO';
$silent->argv(qw(mkattype -nc), $attype)->system and die "Aborted: $!\n";
sub one_block {
  my ($value, $mode) = @_;
  ok(!$silent->mkattr(['-rep', $attype, $value], '.')->system,
     qq(String attribute set to '$value' ($mode mode, array syntax)));
  ok(!$wrap->mkattr(['-rep', $attype, $value], '.')->system,
     qq(Wrapper: String attribute set to '$value' ($mode mode, array syntax)));
  # ok(!$silent->argv(qq(mkattr -rep '$attype' $value .))->system,
  #    qq(String attribute set to '$value' ($mode mode, string syntax)));
}
sub one_pass {
  my $ipc = shift;
  my $mode = $ipc? 'ipc' : 'fork';
  $silent->ipc($ipc);
  one_block(q("foo"), $mode);
  one_block(q("O'Toole"), $mode);
  one_block(q("*test*"), $mode);
  one_block(q("Line one\nLine two"), $mode);
}
one_pass(0);
one_pass(1);

$silent->rmtype([qw(-f -rmall)], "attype:$attype")->system;

print STDERR "\n", ClearCase::Argv->summary;   # print out the stats we kept
